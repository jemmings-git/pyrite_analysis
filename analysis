##### I have now split the processing (func5) and analysis (this file) components of the workflow ####
##### This is in progress - the analysis is split into 3 parts, depending on whether to use both units and 
##### stratigraphic ID Macrostrat databases (Part 1), solely units (Part 2) or solely stratigraphic IDs 
##### following removal of matches to IDs containing units (Part 3)
##### this can be used to assess the contributions from units and wider stratigraphic databases
##### it is a bit messy, there are quite a lot of test interts etc. and not many supporting comments

library(dplyr) # plyr is not needed (note loading plyr after dplyr will prevent execution of PART 2)
library(tidyr)
library(readr)
library(jsonlite)
library(reshape2)
library(ggplot2)
library(safejoin)
library(pammtools)
library(gridExtra)

project_home <- 'N:/Data/xGDD/analysis'
setwd(project_home)

###### PART 1 - units AND strat packages #####

data <-  read.delim("data_comp.txt")

# optional compilation of target words
phrases <- as.data.frame(as.array(data$target_word))

framboids <- subset(data, target_word == "framboidal pyrite"
                          | target_word == "Framboidal pyrite"
                          | target_word == "Framboidal Pyrite"
                          | target_word == "pyrite framboids"
                          | target_word == "pyrite framboid"
                          | target_word == "Pyrite framboids"
                          | target_word == "Pyrite framboid"
                          | target_word == "Pyrite Framboids"
                          | target_word == "Pyrite Framboid"
                          | target_word == "PYRITE FRAMBOID"
                          | target_word == "PYRITE FRAMBOIDS")

framboids1 <- framboids[!duplicated(framboids$unit_id), ]
framboids2 <- framboids[is.na(framboids$unit_id),]
framboids1 <- framboids1[!is.na(framboids1$unit_id),]
framboids2 <- framboids2[!duplicated(framboids2$strat_name_id),]
framboids <- rbind(framboids1, framboids2)

nodules <- subset(data, target_word == "pyrite nodules"
                    | target_word == "pyrite concretions"
                    | target_word == "Pyrite nodules"
                    | target_word == "Pyrite nodule"
                    | target_word == "nodular pyrite"
                    | target_word == "concretionary pyrite"
                    | target_word == "pyritic nodules"
                    | target_word == "pyritic concretions"
                    | target_word == "concretions of pyrite"
                    | target_word == "pyritic nodule"
                    | target_word == "nodules of pyrite"
                    | target_word == "Pyrite nodule"
                    | target_word == "Pyrite concretions"
                    | target_word == "Nodular pyrite"
                    | target_word == "Pyritic nodules"
                    | target_word == "pyrite concretion"
                    | target_word == "Pyrite Nodules"
                    | target_word == "Pyrite concretion"
                    | target_word == "PYRITE NODULE"
                    | target_word == "PYRITE NODULES")

nodules1 <- nodules[!duplicated(nodules$unit_id), ]
nodules2 <- nodules[is.na(nodules$unit_id),]
nodules1 <- nodules1[!is.na(nodules1$unit_id),]
nodules2 <- nodules2[!duplicated(nodules2$strat_name_id),]
nodules <- rbind(nodules1, nodules2)

colnames(framboids)

# convert the dataframes from wide to long format (with respect to the age increments)

# can replace with framboids1 and nodules1 if units-only desired

framboids <- melt(framboids, id.vars = c(1:20, 23:72), na.rm=TRUE)
framboids$value <- as.numeric(framboids$value)

# possibly want to remove b_age - otherwise end up with 2x in the final bin

framboids <- subset(framboids, variable != "b_age")

nodules <- melt(nodules, id.vars = c(1:20, 23:72), na.rm=TRUE)
nodules$value <- as.numeric(nodules$value)

# possibly want to remove b_age - otherwise end up with 2x in the final bin

nodules <- subset(nodules, variable != "b_age")

# example binned data for 'framboids' and 'nodules'

phanerozoic_increment <- 1 # in Ma
precambrian_increment <- 10 # in MA

# Phanerozoic bins

framboids_bins1 <- hist(framboids$value[framboids$value >= 0 & framboids$value <= 542], breaks = seq(0, 541, by = phanerozoic_increment))
framboids_bins1 <- as.data.frame(cbind(framboids_bins1$counts, framboids_bins1$breaks))
framboids_bins1 <- framboids_bins1[1:542,]


# Precambrian bins
framboids_bins2 <- hist(framboids$value[framboids$value > 541 & framboids$value <= 4001], breaks = seq(541, 4001, by = precambrian_increment))
framboids_bins2 <- as.data.frame(cbind(framboids_bins2$counts, framboids_bins2$breaks))

# Bind
framboids_bins <- rbind(framboids_bins1,framboids_bins2)

framboids_bins <- framboids_bins[!duplicated(framboids_bins$V2),] # remove second 541

# Phanerozoic bins
nodules_bins1 <- hist(nodules$value[nodules$value >= 0 & nodules$value <= 542], breaks = seq(0, 541, by = phanerozoic_increment))
nodules_bins1 <- as.data.frame(cbind(nodules_bins1$counts, nodules_bins1$breaks))
nodules_bins1 <- nodules_bins1[1:542,]

# Precambrian bins
nodules_bins2 <- hist(nodules$value[nodules$value >= 541 & nodules$value <= 4001], breaks = seq(541, 4001, by = precambrian_increment))
nodules_bins2 <- as.data.frame(cbind(nodules_bins2$counts, nodules_bins2$breaks))

# Bind
nodules_bins <- rbind(nodules_bins1,nodules_bins2)

nodules_bins <- nodules_bins[!duplicated(nodules_bins$V2),] # remove second 541


###### import all strat & unit ids ####

strat_units <- read.delim("strat_units_comp.txt")

strat_units1 <- strat_units[!duplicated(strat_units$unit_id), ]
strat_units2 <- strat_units[is.na(strat_units$unit_id),]
strat_units1 <- strat_units1[!is.na(strat_units1$unit_id),]
strat_units2 <- strat_units2[!duplicated(strat_units2$strat_name_id),]
strat_units <- rbind(strat_units1, strat_units2)

colnames(strat_units)

strat_units <- melt(strat_units, id.vars = c(1:11, 14:63), na.rm=TRUE)
strat_units$value <- as.numeric(strat_units$value)

strat_units <- subset(strat_units, variable != "b_age")


# Phanerozoic bins

##### OK... so problem with large n at 541 bin is possibly due to duplication
# of counts - i.e., 541.0 bin plus b_age...

#strat_units1 <- subset(strat_units, value >= 540 & value <= 542 & variable == "b_age")

strat_units_bins1 <- hist(strat_units$value[strat_units$value >= 0 & strat_units$value <= 542], breaks = seq(0, 542, by = phanerozoic_increment))
strat_units_bins1 <- as.data.frame(cbind(strat_units_bins1$counts, strat_units_bins1$breaks))
strat_units_bins1 <- strat_units_bins1[1:542,]

# Precambrian bins
strat_units_bins2 <- hist(strat_units$value[strat_units$value > 541 & strat_units$value <= 4001], breaks = seq(541, 4001, by = precambrian_increment))
strat_units_bins2 <- as.data.frame(cbind(strat_units_bins2$counts, strat_units_bins2$breaks))

# Bind
strat_units_bins <- rbind(strat_units_bins1,strat_units_bins2)

strat_units_bins <- strat_units_bins[!duplicated(strat_units_bins$V2),] # remove second 541


# normalised ouput

framboids <- as.data.frame(cbind(framboids_bins$V1/strat_units_bins$V1,nodules_bins$V2))
nodules <- as.data.frame(cbind(nodules_bins$V1/strat_units_bins$V1,nodules_bins$V2))

all <- as.data.frame(cbind((framboids_bins$V1+nodules_bins$V1)/strat_units_bins$V1,nodules_bins$V2))

ratio <- as.data.frame(cbind((framboids$V1)/(framboids$V1+nodules$V1),nodules_bins$V2))
ratio$V1[is.nan(ratio$V1)] <- NA

# mass extinctions

ME <- c(445, 372, 252, 201, 65)
OAEs <- c(183, 120, 111, 93) # from Jenkyns 2010
PETM <- 55.8 # from Jenkyns 2010
Sturt <- c(716, 663) # Sturtian glaciation from ???
Es <- c(517, 502, 405, 393, 388, 382, 359, 330, 249, 240, 230, 220, 188, 145)
Extras <- c(2500, 1600, 1000, 720, 635, 541, 485.4, 443.8, 419.2, 358.9, 298.9, 
            251.9, 201.3, 145, 66, 23.03, 2.58) # Chronostrat divisions
supercontinents <- c(320, 170, 900, 700, 1600, 1400) # from Li et al. 2019 Precambrian Research
carb.intervals <- c(541, 465, 372, 323, 265, 227, 164, 133)
lows <- c(323, 299, 201, 170) # carb.intervals and lows from Riding et al. 2019


# possible anoxic events

# step plot - marine - with proportions of carbonate & siliciclastic units below

a <- ggplot(all, aes(V2, V1)) + theme_bw() +
  geom_stepribbon(aes(ymin = 0, ymax = V1), fill = "gray85") +
  scale_x_reverse(limits = c(4000, 540)) + geom_step() +
  geom_stepribbon(data = framboids, aes(ymin = 0, ymax = V1), fill = "red") +
  geom_step(data = framboids)

# phanerozoic boxplot

box <- subset(all, V2 < 540)
box$type <- "all"
box1 <- subset(framboids, V2 < 540)
box1$type <- "framboids"

box <- rbind(box, box1)

b <- ggplot(box) + theme_bw() +
  geom_violin(aes(type, V1)) + geom_boxplot(aes(type, V1), width = 0.1)

# log scale
a1 <- a + scale_y_log10(limits = c(0.0006,0.06))
b1 <- b + scale_y_log10(limits = c(0.0006,0.06))
grid.arrange(a1, b1, ncol = 2)

# linear scale
a2 <- a + scale_y_continuous(limits = c(0,0.052))
b2 <- b + scale_y_continuous(limits = c(0,0.052))
grid.arrange(a2, b2, ncol = 2)

ggplot(all, aes(V2, V1)) + theme_bw() +
  geom_stepribbon(aes(ymin = 0, ymax = V1), fill = "gray85") +
  scale_x_reverse(limits = c(541, -0.5)) +
  scale_y_continuous(limits = c(0,0.06)) + geom_step() +
  geom_stepribbon(data = framboids, aes(ymin = 0, ymax = V1), fill = "red") +
  geom_step(data = framboids) +
  geom_vline(xintercept = Extras, colour = 'blue')

Top <- -0 # top age for plot (in Ma), set at -0.5 in order to centre bins
Bottom <- 3500 # bottom age for plot (in Ma)
phanerozoic_increment <- 1
precambrian_increment <- 10


a <- ggplot() + theme_bw() +
  scale_x_reverse(limits = c(Bottom, 541)) +
  scale_y_continuous(limits = c(0,0.05)) +
  geom_stepribbon(data = all, aes(V2-0.5, ymin = 0, ymax = V1), fill = "blue") +
  geom_stepribbon(data = framboids, aes(V2-0.5, ymin = 0, ymax = V1), fill = "red") +
  geom_step(data = all, aes(V2-0.5, V1)) +
  geom_step(data = framboids, aes(V2-0.5, V1))

b <- ggplot() + theme_bw() +
  scale_x_reverse(limits = c(541, Top)) +
  scale_y_continuous(limits = c(0,0.05)) +
  geom_stepribbon(data = all, aes(V2-0.5, ymin = 0, ymax = V1), fill = "blue") +
  geom_stepribbon(data = framboids, aes(V2-0.5, ymin = 0, ymax = V1), fill = "red") +
  geom_step(data = framboids, aes(V2-0.5, V1)) + 
  geom_step(data = all, aes(V2-0.5, V1)) +
  theme(axis.title.y=element_blank(),
        axis.text.y=element_blank(),
        axis.ticks.y=element_blank()) + 
  #geom_vline(xintercept = ME) + 
  geom_vline(xintercept = c(Es))

#Extras, ME, OAEs, 

grid.arrange(a,b, ncol = 2)

# with Large et al. 2015 data

large <- read.delim("Large.txt")

# Se plot

ggplot() + theme_bw() +
  scale_x_reverse(limits = c(541, Top)) +
  scale_y_log10(limits = c(0.1, 10000)) +
  geom_line(data = large, aes(Sample.Age, Se), size = 1) +
  #geom_vline(xintercept = ME) + 
  geom_vline(xintercept = c(Es))


# now for facets

pyrites <- subset(data, target_word == "framboidal pyrite"
                  | target_word == "Framboidal pyrite"
                  | target_word == "Framboidal Pyrite"
                  | target_word == "pyrite framboids"
                  | target_word == "pyrite framboid"
                  | target_word == "Pyrite framboids"
                  | target_word == "Pyrite framboid"
                  | target_word == "Pyrite Framboids"
                  | target_word == "Pyrite Framboid"
                  | target_word == "PYRITE FRAMBOID"
                  | target_word == "PYRITE FRAMBOIDS"
                  | target_word == "pyrite nodules"
                  | target_word == "pyrite concretions"
                  | target_word == "Pyrite nodules"
                  | target_word == "Pyrite nodule"
                  | target_word == "nodular pyrite"
                  | target_word == "concretionary pyrite"
                  | target_word == "pyritic nodules"
                  | target_word == "pyritic concretions"
                  | target_word == "concretions of pyrite"
                  | target_word == "pyritic nodule"
                  | target_word == "nodules of pyrite"
                  | target_word == "Pyrite nodule"
                  | target_word == "Pyrite concretions"
                  | target_word == "Nodular pyrite"
                  | target_word == "Pyritic nodules"
                  | target_word == "pyrite concretion"
                  | target_word == "Pyrite Nodules"
                  | target_word == "Pyrite concretion"
                  | target_word == "PYRITE NODULE"
                  | target_word == "PYRITE NODULES")

pyrites1 <- pyrites[!duplicated(pyrites$unit_id), ]
pyrites2 <- pyrites[is.na(pyrites$unit_id),]
pyrites1 <- pyrites1[!is.na(pyrites1$unit_id),]
pyrites2 <- pyrites2[!duplicated(pyrites2$strat_name_id),]
pyrites <- rbind(pyrites1, pyrites2)

pyrites <- melt(pyrites, id.vars = c(1:20, 23:72), na.rm=TRUE)
pyrites$value <- as.numeric(pyrites$value)

# fix for Phanerozoic vs. Precambrian below

pyrites1 <- subset(pyrites, value <= 541)
pyrites1$V2 <- round(pyrites1$value, digits = 0)

pyrites2 <- subset(pyrites, value > 541)
pyrites2$value <- pyrites2$value-1
pyrites2$V2 <- round(pyrites2$value, digits = -1)
pyrites2$value <- pyrites2$value+1
pyrites2$V2 <- pyrites2$V2+1

pyrites <- rbind(pyrites1, pyrites2)

test <- left_join(pyrites, ratio, by = c("V2", "V2"))
test <- left_join(test, all, by = c("V2", "V2"))

periods <- read.delim("periods.txt")

periods<- periods[seq(dim(periods)[1],1),]

breaks <- periods$Breaks

periods$Period <- factor(periods$Period, levels=unique(periods$Period))
periods <- periods$Period


colnames(test)

test$period <- cut(test$V2, 
                   breaks=c(-Inf, 2500, 541, 485, 444, 419, 359, 299, 252, 201, 145, 66, 23, 3, Inf),
                   labels=periods)


#unique(test$econ)

#library(tidyverse)

test <- test[!is.infinite(test$V1.x),]
test <- test[!is.na(test$V1.x),]
test <- test[!is.infinite(test$V1.y),]
test <- test[!is.na(test$V1.y),]

hull_test <- test %>%
  group_by(strat_name_id) %>%
  slice(chull(V1.x, V1.y))

# optional removal of quaternary

hull_test <- hull_test[which(hull_test$period != "Quaternary"),]
hull_test <- hull_test[which(hull_test$period != "Archaean"),]

ggplot(hull_test, aes(V1.x, V1.y)) + geom_polygon(aes(group = strat_name_id, fill = period), alpha = 0.5) +
  theme_bw() + 
  #scale_y_log10(limits = c(0.003, 0.3)) +
  scale_y_continuous(limits = c(0, 0.055)) +
  geom_polygon(aes(group = strat_name_id), colour = "black", alpha = 0) +
  facet_wrap(~period) + geom_hline(yintercept = c(0.02, 0.04)) +
  geom_vline(xintercept = 0.5) +
  geom_point(aes(fill = period), colour = "black", pch = 21)

# import zaffos file - https://github.com/UW-Macrostrat/PNAS_201702297/blob/master/FinalData/ContinuousTimeSeries.csv
zaffos <- read.delim("Zaffos_et_al.txt")
 
zaffos <- zaffos[,1:2]

names(zaffos)<- c("V2", "fragmentation")

zaffos <- left_join(test, zaffos, by = c("V2", "V2"))

zaffos$V1.y

ggplot(zaffos, aes(fragmentation, V1.x)) + 
  geom_point(aes(colour = period)) + theme_bw()

ggplot(zaffos, aes(fragmentation, V1.y)) + 
  geom_point(aes(colour = period)) + theme_bw() +
  scale_y_continuous(limits = c(0, 0.05))

zaffos <- zaffos[!is.infinite(zaffos$V1.x),]
zaffos <- zaffos[!is.na(zaffos$V1.x),]
zaffos <- zaffos[!is.infinite(zaffos$V1.y),]
zaffos <- zaffos[!is.na(zaffos$V1.y),]
zaffos <- zaffos[!is.infinite(zaffos$fragmentation),]
zaffos <- zaffos[!is.na(zaffos$fragmentation),]

hull_zaffos <- zaffos %>%
  group_by(strat_name_id) %>%
  slice(chull(V1.x, fragmentation))

ggplot(hull_zaffos, aes(V1.x, fragmentation)) + geom_polygon(aes(group = strat_name_id, fill = period), alpha = 0.5) +
  theme_bw() + 
  #scale_y_log10(limits = c(0.003, 0.3)) +
  geom_polygon(aes(group = strat_name_id), colour = "black", alpha = 0) +
  facet_wrap(~period) + 
  geom_point(aes(fill = period), colour = "black", pch = 21)

ggplot(zaffos) + geom_line(aes(V2, fragmentation)) +
  stat_smooth(aes(V2, fragmentation), colour = "black", method=lm, formula = y ~ poly(x,5)) +
  theme_bw()

ggplot(zaffos) + geom_line(aes(V2, fragmentation)) +
  theme_bw()

a <- ggplot() + theme_bw() +
  scale_x_reverse(limits = c(541, Top)) +
  scale_y_continuous(limits = c(0,0.05)) +
  geom_stepribbon(data = all, aes(V2-0.5, ymin = 0, ymax = V1), fill = "blue") +
  geom_stepribbon(data = framboids, aes(V2-0.5, ymin = 0, ymax = V1), fill = "red") +
  geom_step(data = framboids, aes(V2-0.5, V1)) + 
  geom_step(data = all, aes(V2-0.5, V1)) +
  theme(axis.title.x=element_blank(),
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank()) + 
  #geom_vline(xintercept = ME) + 
  geom_vline(xintercept = Extras)

b <- ggplot(zaffos) + geom_line(aes(V2-0.5, fragmentation)) +
  scale_x_reverse(limits = c(541, Top)) + 
  geom_vline(xintercept = Extras) +
  theme_bw()

grid.arrange(a,b, ncol = 1)

# need to differentiate frag index - then might make some sense


###### PART 2 - strat packages only #####

data <-  read.delim("data_comp.txt")

# optional compilation of target words
phrases <- as.data.frame(as.array(data$target_word))

framboids <- subset(data, target_word == "framboidal pyrite"
                    | target_word == "Framboidal pyrite"
                    | target_word == "Framboidal Pyrite"
                    | target_word == "pyrite framboids"
                    | target_word == "pyrite framboid"
                    | target_word == "Pyrite framboids"
                    | target_word == "Pyrite framboid"
                    | target_word == "Pyrite Framboids"
                    | target_word == "Pyrite Framboid"
                    | target_word == "PYRITE FRAMBOID"
                    | target_word == "PYRITE FRAMBOIDS")

framboids <- framboids[is.na(framboids$unit_id),]
framboids <- framboids[!duplicated(framboids$strat_name_id),]


nodules <- subset(data, target_word == "pyrite nodules"
                  | target_word == "pyrite concretions"
                  | target_word == "Pyrite nodules"
                  | target_word == "Pyrite nodule"
                  | target_word == "nodular pyrite"
                  | target_word == "concretionary pyrite"
                  | target_word == "pyritic nodules"
                  | target_word == "pyritic concretions"
                  | target_word == "concretions of pyrite"
                  | target_word == "pyritic nodule"
                  | target_word == "nodules of pyrite"
                  | target_word == "Pyrite nodule"
                  | target_word == "Pyrite concretions"
                  | target_word == "Nodular pyrite"
                  | target_word == "Pyritic nodules"
                  | target_word == "pyrite concretion"
                  | target_word == "Pyrite Nodules"
                  | target_word == "Pyrite concretion"
                  | target_word == "PYRITE NODULE"
                  | target_word == "PYRITE NODULES")

nodules <- nodules[is.na(nodules$unit_id),]
nodules <- nodules[!duplicated(nodules$strat_name_id),]

colnames(framboids)

# convert the dataframes from wide to long format (with respect to the age increments)

# can replace with framboids1 and nodules1 if units-only desired

framboids <- melt(framboids, id.vars = c(1:20, 23:72), na.rm=TRUE)
framboids$value <- as.numeric(framboids$value)

nodules <- melt(nodules, id.vars = c(1:20, 23:72), na.rm=TRUE)
nodules$value <- as.numeric(nodules$value)

# example binned data for 'framboids' and 'nodules'

phanerozoic_increment <- 1 # in Ma
precambrian_increment <- 10 # in MA

# Phanerozoic bins

framboids_bins1 <- hist(framboids$value[framboids$value >= 0 & framboids$value <= 542], breaks = seq(0, 541, by = phanerozoic_increment))
framboids_bins1 <- as.data.frame(cbind(framboids_bins1$counts, framboids_bins1$breaks))
framboids_bins1 <- framboids_bins1[1:542,]


# Precambrian bins
framboids_bins2 <- hist(framboids$value[framboids$value > 541 & framboids$value <= 4001], breaks = seq(541, 4001, by = precambrian_increment))
framboids_bins2 <- as.data.frame(cbind(framboids_bins2$counts, framboids_bins2$breaks))

# Bind
framboids_bins <- rbind(framboids_bins1,framboids_bins2)

framboids_bins <- framboids_bins[!duplicated(framboids_bins$V2),] # remove second 541

# Phanerozoic bins
nodules_bins1 <- hist(nodules$value[nodules$value >= 0 & nodules$value <= 542], breaks = seq(0, 541, by = phanerozoic_increment))
nodules_bins1 <- as.data.frame(cbind(nodules_bins1$counts, nodules_bins1$breaks))
nodules_bins1 <- nodules_bins1[1:542,]

# Precambrian bins
nodules_bins2 <- hist(nodules$value[nodules$value >= 541 & nodules$value <= 4001], breaks = seq(541, 4001, by = precambrian_increment))
nodules_bins2 <- as.data.frame(cbind(nodules_bins2$counts, nodules_bins2$breaks))

# Bind
nodules_bins <- rbind(nodules_bins1,nodules_bins2)

nodules_bins <- nodules_bins[!duplicated(nodules_bins$V2),] # remove second 541


###### import all strat & unit ids ####

strat_units <- read.delim("strat_units_comp.txt")

strat_units <- strat_units[is.na(strat_units$unit_id),]
strat_units <- strat_units[!duplicated(strat_units$strat_name_id),]

colnames(strat_units)

strat_units <- melt(strat_units, id.vars = c(1:11, 14:63), na.rm=TRUE)
strat_units$value <- as.numeric(strat_units$value)

# Phanerozoic bins

##### OK... so problem with large n at 541 bin is possibly due to duplication
# of counts - i.e., 541.0 bin plus b_age...

#strat_units1 <- subset(strat_units, value >= 540 & value <= 542 & variable == "b_age")

strat_units_bins1 <- hist(strat_units$value[strat_units$value >= 0 & strat_units$value <= 542], breaks = seq(0, 542, by = phanerozoic_increment))
strat_units_bins1 <- as.data.frame(cbind(strat_units_bins1$counts, strat_units_bins1$breaks))
strat_units_bins1 <- strat_units_bins1[1:542,]

# Precambrian bins
strat_units_bins2 <- hist(strat_units$value[strat_units$value > 541 & strat_units$value <= 4001], breaks = seq(541, 4001, by = precambrian_increment))
strat_units_bins2 <- as.data.frame(cbind(strat_units_bins2$counts, strat_units_bins2$breaks))

# Bind
strat_units_bins <- rbind(strat_units_bins1,strat_units_bins2)

strat_units_bins <- strat_units_bins[!duplicated(strat_units_bins$V2),] # remove second 541


# normalised ouput

framboids <- as.data.frame(cbind(framboids_bins$V1/strat_units_bins$V1,nodules_bins$V2))
nodules <- as.data.frame(cbind(nodules_bins$V1/strat_units_bins$V1,nodules_bins$V2))

all <- as.data.frame(cbind((framboids_bins$V1+nodules_bins$V1)/strat_units_bins$V1,nodules_bins$V2))

ratio <- as.data.frame(cbind((framboids$V1)/(framboids$V1+nodules$V1),nodules_bins$V2))
ratio$V1[is.nan(ratio$V1)] <- NA

# mass extinctions

ME <- c(445, 372, 252, 201, 65)
OAEs <- c(183, 120, 111, 93) # from Jenkyns 2010
PETM <- 55.8 # from Jenkyns 2010
Sturt <- c(716, 663) # Sturtian glaciation from ???
Es <- c(517, 502, 405, 393, 388, 382, 359, 330, 249, 240, 230, 220, 188, 145)
Extras <- c(2500, 1600, 1000, 720, 635, 541, 485.4, 443.8, 419.2, 358.9, 298.9, 
            251.9, 201.3, 145, 66, 23.03, 2.58) # Chronostrat divisions
supercontinents <- c(320, 170, 900, 700, 1600, 1400) # from Li et al. 2019 Precambrian Research
carb.intervals <- c(541, 465, 372, 323, 265, 227, 164, 133)
lows <- c(323, 299, 201, 170) # carb.intervals and lows from Riding et al. 2019


# possible anoxic events

# step plot - marine - with proportions of carbonate & siliciclastic units below

a <- ggplot(all, aes(V2, V1)) + theme_bw() +
  geom_stepribbon(aes(ymin = 0, ymax = V1), fill = "gray85") +
  scale_x_reverse(limits = c(4000, 540)) + geom_step() +
  geom_stepribbon(data = framboids, aes(ymin = 0, ymax = V1), fill = "red") +
  geom_step(data = framboids)

# phanerozoic boxplot

box <- subset(all, V2 < 540)
box$type <- "all"
box1 <- subset(framboids, V2 < 540)
box1$type <- "framboids"

box <- rbind(box, box1)

b <- ggplot(box) + theme_bw() +
  geom_violin(aes(type, V1)) + geom_boxplot(aes(type, V1), width = 0.1)

# log scale
a1 <- a + scale_y_log10(limits = c(0.0006,0.06))
b1 <- b + scale_y_log10(limits = c(0.0006,0.06))
grid.arrange(a1, b1, ncol = 2)

# linear scale
a2 <- a + scale_y_continuous(limits = c(0,0.052))
b2 <- b + scale_y_continuous(limits = c(0,0.052))
grid.arrange(a2, b2, ncol = 2)

ggplot(all, aes(V2, V1)) + theme_bw() +
  geom_stepribbon(aes(ymin = 0, ymax = V1), fill = "gray85") +
  scale_x_reverse(limits = c(541, -0.5)) +
  scale_y_continuous(limits = c(0,0.06)) + geom_step() +
  geom_stepribbon(data = framboids, aes(ymin = 0, ymax = V1), fill = "red") +
  geom_step(data = framboids) +
  geom_vline(xintercept = Extras, colour = 'blue')

a <- ggplot() + theme_bw() +
  scale_x_reverse(limits = c(Bottom, 541)) +
  scale_y_continuous(limits = c(0,0.035)) +
  geom_stepribbon(data = all, aes(V2-0.5, ymin = 0, ymax = V1), fill = "blue") +
  geom_stepribbon(data = framboids, aes(V2-0.5, ymin = 0, ymax = V1), fill = "red") +
  geom_step(data = all, aes(V2-0.5, V1)) +
  geom_step(data = framboids, aes(V2-0.5, V1))

b <- ggplot() + theme_bw() +
  scale_x_reverse(limits = c(541, Top)) +
  scale_y_continuous(limits = c(0,0.035)) +
  geom_stepribbon(data = all, aes(V2-0.5, ymin = 0, ymax = V1), fill = "blue") +
  geom_stepribbon(data = framboids, aes(V2-0.5, ymin = 0, ymax = V1), fill = "red") +
  geom_step(data = framboids, aes(V2-0.5, V1)) + 
  geom_step(data = all, aes(V2-0.5, V1)) +
  theme(axis.title.y=element_blank(),
        axis.text.y=element_blank(),
        axis.ticks.y=element_blank()) + 
  #geom_vline(xintercept = ME) + 
  geom_vline(xintercept = Extras)

grid.arrange(a,b, ncol = 2)

pyrites <- subset(data, target_word == "framboidal pyrite"
                  | target_word == "Framboidal pyrite"
                  | target_word == "Framboidal Pyrite"
                  | target_word == "pyrite framboids"
                  | target_word == "pyrite framboid"
                  | target_word == "Pyrite framboids"
                  | target_word == "Pyrite framboid"
                  | target_word == "Pyrite Framboids"
                  | target_word == "Pyrite Framboid"
                  | target_word == "PYRITE FRAMBOID"
                  | target_word == "PYRITE FRAMBOIDS"
                  | target_word == "pyrite nodules"
                  | target_word == "pyrite concretions"
                  | target_word == "Pyrite nodules"
                  | target_word == "Pyrite nodule"
                  | target_word == "nodular pyrite"
                  | target_word == "concretionary pyrite"
                  | target_word == "pyritic nodules"
                  | target_word == "pyritic concretions"
                  | target_word == "concretions of pyrite"
                  | target_word == "pyritic nodule"
                  | target_word == "nodules of pyrite"
                  | target_word == "Pyrite nodule"
                  | target_word == "Pyrite concretions"
                  | target_word == "Nodular pyrite"
                  | target_word == "Pyritic nodules"
                  | target_word == "pyrite concretion"
                  | target_word == "Pyrite Nodules"
                  | target_word == "Pyrite concretion"
                  | target_word == "PYRITE NODULE"
                  | target_word == "PYRITE NODULES")

pyrites <- pyrites[is.na(pyrites$unit_id),]
pyrites <- pyrites[!duplicated(pyrites$strat_name_id),]

pyrites <- melt(pyrites, id.vars = c(1:20, 23:72), na.rm=TRUE)
pyrites$value <- as.numeric(pyrites$value)

# fix for Phanerozoic vs. Precambrian below

pyrites1 <- subset(pyrites, value <= 541)
pyrites1$V2 <- round(pyrites1$value, digits = 0)

pyrites2 <- subset(pyrites, value > 541)
pyrites2$value <- pyrites2$value-1
pyrites2$V2 <- round(pyrites2$value, digits = -1)
pyrites2$value <- pyrites2$value+1
pyrites2$V2 <- pyrites2$V2+1

pyrites <- rbind(pyrites1, pyrites2)

test <- left_join(pyrites, ratio, by = c("V2", "V2"))
test <- left_join(test, all, by = c("V2", "V2"))

periods <- read.delim("periods.txt")

periods<- periods[seq(dim(periods)[1],1),]

breaks <- periods$Breaks

periods$Period <- factor(periods$Period, levels=unique(periods$Period))
periods <- periods$Period


colnames(test)

test$period <- cut(test$V2, 
                   breaks=c(-Inf, 2500, 541, 485, 444, 419, 359, 299, 252, 201, 145, 66, 23, 3, Inf),
                   labels=periods)


#unique(test$econ)

#library(tidyverse)

test <- test[!is.infinite(test$V1.x),]
test <- test[!is.na(test$V1.x),]
test <- test[!is.infinite(test$V1.y),]
test <- test[!is.na(test$V1.y),]

hull_test <- test %>%
  group_by(strat_name_id) %>%
  slice(chull(V1.x, V1.y))

hull_test <- hull_test[which(hull_test$period != "Quaternary"),]
hull_test <- hull_test[which(hull_test$period != "Archaean"),]

ggplot(hull_test, aes(V1.x, V1.y)) + geom_polygon(aes(group = strat_name_id, fill = period), alpha = 0.5) +
  theme_bw() + 
  #scale_y_log10(limits = c(0.003, 0.3)) +
  scale_y_continuous(limits = c(0, 0.055)) +
  geom_polygon(aes(group = strat_name_id), colour = "black", alpha = 0) +
  facet_wrap(~period) + geom_hline(yintercept = c(0.02, 0.04)) +
  geom_vline(xintercept = 0.5) +
  geom_point(aes(fill = period), colour = "black", pch = 21)

##### PART 3 - marine units only #####

# select phrases of interest in grepl function below, this can be done quickly by appraising the 'phrases' dataframe

data <- read.delim("data_comp.txt")

# running this....

#data <- melt(data, id.vars = c(1:20, 23:72), na.rm=TRUE)
#data$value <- as.numeric(data$value)

# ....instead of the 11-09-09 inserts underneath produces an output 
#that more closely resembles Peters et al.

# optional compilation of target words
phrases <- as.data.frame(as.array(data$target_word))

data$envCODE <- gsub("TRUE", "Non-Marine", grepl("non-marine", data$environ))
data$envCODE <- gsub("FALSE", "Marine", data$envCODE)
data$envCODE[is.na(data$unit_name)] <- NA
data$lithCODE <- gsub("TRUE", "Sedimentary", grepl("sedimentary", data$lith))
data$lithCODE <- gsub("FALSE", "Non-Sed", data$lithCODE)
data$lithCODE[is.na(data$unit_name)] <- NA

unique(phrases)

# quick replication of stromatolites demo below - not perfect
# includes subset for marine settings (Phanerozoic) - otherwise the output is skewed by 
# freshwater data such as the Palaeocene-Eocene Green River Fm.
# this method is consistent with Peters et al. 2017

target <- grepl("yri", data$target_word) 

target <- subset(data, target)

target <- target[!duplicated(target$unit_id), ] # TEST INSERT 11-09-19
target <- melt(target, id.vars = c(1:20, 23:72, 613:614), na.rm=TRUE) # TEST INSERT 11-09-19
target$value <- as.numeric(target$value) # TEST INSERT 11-09-19

target1 <- subset(target, value < 541)
target1 <- subset(target1, envCODE == "Marine")
target1 <- subset(target1, lithCODE == "Sedimentary")
target2 <- subset(target, value > 541)

target <- rbind(target1, target2)

## framboids

target2 <- grepl("ramb", data$target_word) 

target2 <- subset(data, target2)

target2 <- target2[!duplicated(target2$unit_id), ] # TEST INSERT 11-09-19
target2 <- melt(target2, id.vars = c(1:20, 23:72, 613:614), na.rm=TRUE) # TEST INSERT 11-09-19
target2$value <- as.numeric(target2$value) 

# remove mentions of 'non' i.e., non-stromatolitic

false <- !grepl("non", target$target_word) & !grepl("Non", target$target_word)

target <- subset(target, false)

marine <- grepl("yri", data$target_word)  |  data$envCODE == "Marine"

marine <- subset(data, marine)

marine <- subset(marine, false)

sedimentary <- grepl("yri", marine$target_word) | marine$lithCODE == "Sedimentary"

marine <- subset(marine, sedimentary) # final marine sedimentary units output

marine <- marine[!duplicated(marine$unit_id), ] # TEST INSERT 11-09-19
marine <- melt(marine, id.vars = c(1:20, 23:72, 613:614), na.rm=TRUE) # TEST INSERT 11-09-19
marine$value <- as.numeric(marine$value) # TEST INSERT 11-09-19

Top <- -0 # top age for plot (in Ma), set at -0.5 in order to centre bins
Bottom <- 2500 # bottom age for plot (in Ma)
phanerozoic_increment <- 1
precambrian_increment <- 10

# bin calculation 

# Phanerozoic bins
marine_bins1 <- hist(marine$value[marine$value >= 0 & marine$value <= 542], breaks = seq(0, 542, by = phanerozoic_increment))
marine_bins1 <- as.data.frame(cbind(marine_bins1$counts, marine_bins1$breaks))
marine_bins1 <- marine_bins1[1:542,]

# Precambrian bins
marine_bins2 <- hist(marine$value[marine$value >= 541 & marine$value <= 2501], breaks = seq(541, 2501, by = precambrian_increment))
marine_bins2 <- as.data.frame(cbind(marine_bins2$counts, marine_bins2$breaks))

# Bind
marine_bins <- rbind(marine_bins1,marine_bins2)

# Ignore V2 = 0 (anomaly) 
marine_bins_se <- marine_bins
marine_bins_se[1,1] <- NA

# Standard error
marine_bins$se <- (median((marine_bins_se$V1-median(marine_bins_se$V1, na.rm = TRUE))^2, na.rm = TRUE))^0.5 # combined se calc

# may need to consider seperate se for precambrian & phanerozoic?

# Phanerozoic bins
target_bins1 <- hist(target$value[target$value >= 0 & target$value <= 542], breaks = seq(0, 542, by = phanerozoic_increment))
target_bins1 <- as.data.frame(cbind(target_bins1$counts, target_bins1$breaks))
target_bins1 <- target_bins1[1:542,]

# Precambrian bins
target_bins2 <- hist(target$value[target$value >= 541 & target$value <= 2501], breaks = seq(541, 2501, by = precambrian_increment))
target_bins2 <- as.data.frame(cbind(target_bins2$counts, target_bins2$breaks))

# Bind
target_bins <- rbind(target_bins1,target_bins2)

# Ignore V2 = 0 (anomaly) 
target_bins_se <- target_bins
target_bins_se[1,1] <- NA

# Standard error
target_bins$se <- (median((target_bins_se$V1-median(target_bins_se$V1, na.rm = TRUE))^2, na.rm = TRUE))^0.5 # combined se calc

# propagate standard errors in fractional quadrature

standard_error_quad <- ((((100/target_bins$V1)*target_bins$se)^2)+(((100/marine_bins$V1)*marine_bins$se)^2))^0.5


target_marine_prop <- as.data.frame(cbind((target_bins$V1)/marine_bins$V1,
                                          target_bins$V2, 
                                          ((target_bins$V1)/marine_bins$V1)*(standard_error_quad/100)))

target_marine_prop$topse <- target_marine_prop$V1+target_marine_prop$V3
target_marine_prop$basese <- target_marine_prop$V1-target_marine_prop$V3

target_marine_prop$topse[target_marine_prop$topse > 0.25] <- 0.25
target_marine_prop$basese[target_marine_prop$basese < 0] <- 0

# framboids

# TEST INSERT 11-09-19

target21 <- subset(target2, value < 541)
target21 <- subset(target21, envCODE == "Marine")
target21 <- subset(target21, lithCODE == "Sedimentary")
target22 <- subset(target2, value > 541)

target2 <- rbind(target21, target22)

# remove mentions of 'non' i.e., non-stromatolitic

false <- !grepl("non", target2$target_word) & !grepl("Non", target2$target_word)

target2 <- subset(target2, false)

Top <- -0 # top age for plot (in Ma), set at -0.5 in order to centre bins
Bottom <- 2500 # bottom age for plot (in Ma)
phanerozoic_increment <- 1
precambrian_increment <- 10

# bin calculation 

# Phanerozoic bins
target2_bins1 <- hist(target2$value[target2$value >= 0 & target2$value <= 542], breaks = seq(0, 542, by = phanerozoic_increment))
target2_bins1 <- as.data.frame(cbind(target2_bins1$counts, target2_bins1$breaks))
target2_bins1 <- target2_bins1[1:542,]

# Precambrian bins
target2_bins2 <- hist(target2$value[target2$value >= 541 & target2$value <= 2501], breaks = seq(541, 2501, by = precambrian_increment))
target2_bins2 <- as.data.frame(cbind(target2_bins2$counts, target2_bins2$breaks))

# Bind
target2_bins <- rbind(target2_bins1,target2_bins2)

# Ignore V2 = 0 (anomaly) 
target2_bins_se <- target2_bins
target2_bins_se[1,1] <- NA

# Standard error
target2_bins$se <- (median((target2_bins_se$V1-median(target2_bins_se$V1, na.rm = TRUE))^2, na.rm = TRUE))^0.5 # combined se calc

# propagate standard errors in fractional quadrature

standard_error_quad <- ((((100/target2_bins$V1)*target2_bins$se)^2)+(((100/marine_bins$V1)*marine_bins$se)^2))^0.5


framboids <- as.data.frame(cbind((target2_bins$V1)/marine_bins$V1,
                                 target2_bins$V2, 
                                 ((target2_bins$V1)/marine_bins$V1)*(standard_error_quad/100)))

framboids$topse <- target_marine_prop$V1+target_marine_prop$V3
framboids$basese <- target_marine_prop$V1-target_marine_prop$V3

framboids$topse[target_marine_prop$topse > 0.25] <- 0.25
framboids$basese[target_marine_prop$basese < 0] <- 0

# Output (Peters et al. style step)

a <- ggplot(target_marine_prop, aes(V2, V1)) + theme_bw() +
  geom_stepribbon(aes(ymin = basese, ymax = topse), fill = "gray85") +
  scale_x_reverse(limits = c(Bottom, 540)) +
  scale_y_continuous(limits = c(0,0.25)) +
  geom_step(aes(V2, topse), colour = 'gray') +
  geom_step(aes(V2, basese), colour = 'gray') + geom_step()

b <- ggplot(target_marine_prop, aes(V2, V1)) + theme_bw() +
  geom_stepribbon(aes(ymin = basese, ymax = topse), fill = "gray85") +
  scale_x_reverse(limits = c(541, Top)) +
  scale_y_continuous(limits = c(0,0.25)) +
  geom_step(aes(V2, topse), colour = 'gray') +
  geom_step(aes(V2, basese), colour = 'gray') + geom_step() +
  theme(axis.title.y=element_blank(),
        axis.text.y=element_blank(),
        axis.ticks.y=element_blank())

grid.arrange(a,b, ncol = 2)

ME <- c(445, 372, 252, 201, 65)
OAEs <- c(183, 120, 111, 93) # from Jenkyns 2010
PETM <- 55.8 # from Jenkyns 2010
Sturt <- c(716, 663) # Sturtian glaciation from ???
Es <- c(517, 502, 405, 393, 388, 382, 359, 330, 249, 240, 230, 220, 188, 145)
Extras <- c(2500, 1600, 1000, 720, 635, 541, 485.4, 443.8, 419.2, 358.9, 298.9, 
            251.9, 201.3, 145, 66, 23.03, 2.58) # Chronostrat divisions
supercontinents <- c(320, 170, 900, 700, 1600, 1400) # from Li et al. 2019 Precambrian Research
carb.intervals <- c(541, 465, 372, 323, 265, 227, 164, 133)
lows <- c(323, 299, 201, 170) 

a <- ggplot() + theme_bw() +
  scale_x_reverse(limits = c(Bottom, 541)) +
  scale_y_continuous(limits = c(0,0.25)) +
  geom_stepribbon(data = target_marine_prop, aes(V2-0.5, ymin = 0, ymax = V1), fill = "blue") +
  geom_stepribbon(data = framboids, aes(V2-0.5, ymin = 0, ymax = V1), fill = "red") +
  geom_step(data = target_marine_prop, aes(V2-0.5, V1)) +
  geom_step(data = framboids, aes(V2-0.5, V1))

b <- ggplot() + theme_bw() +
  scale_x_reverse(limits = c(541, Top)) +
  scale_y_continuous(limits = c(0,0.25)) +
  geom_stepribbon(data = target_marine_prop, aes(V2-0.5, ymin = 0, ymax = V1), fill = "blue") +
  geom_stepribbon(data = framboids, aes(V2-0.5, ymin = 0, ymax = V1), fill = "red") +
  geom_step(data = framboids, aes(V2-0.5, V1)) + 
  geom_step(data = target_marine_prop, aes(V2-0.5, V1)) +
  theme(axis.title.y=element_blank(),
        axis.text.y=element_blank(),
        axis.ticks.y=element_blank()) + 
  #geom_vline(xintercept = ME) + 
  geom_vline(xintercept = Extras)

grid.arrange(a,b, ncol = 2)

grid.arrange(a,b, ncol = 2)

ratio <- cbind(as.data.frame(framboids$V1/target_marine_prop$V1), target_marine_prop$V2)

names(ratio) <- c("ratio", "V2")

ratio$ratio[is.nan(ratio$ratio)] <- NA

c <- ggplot() + theme_bw() +
  scale_x_reverse(limits = c(Bottom, 540)) +
  scale_y_continuous(limits = c(0,1)) +
  geom_step(data = ratio, aes(V2-0.5, ratio))

d <- ggplot() + theme_bw() +
  scale_x_reverse(limits = c(541, Top)) +
  scale_y_continuous(limits = c(0,1)) +
  geom_step(data = ratio, aes(V2-0.5, ratio)) +
  theme(axis.title.y=element_blank(),
        axis.text.y=element_blank(),
        axis.ticks.y=element_blank()) + 
  geom_vline(xintercept = ME, colour = "red") + 
  geom_vline(xintercept = Es, colour = "blue")

grid.arrange(c,d, ncol = 2)

# then re-plot cross-plots using tidyverse

target$V2 <- round(target$value, digits = 0)

target1 <- subset(target, value <= 541)
target1$V2 <- round(target1$value, digits = 0)

target2 <- subset(target, value > 541)
target2$value <- target2$value-1
target2$V2 <- round(target2$value, digits = -1)
target2$value <- target2$value+1
target2$V2 <- target2$V2+1

target <- rbind(target1, target2)

test <- left_join(target, ratio, by = c("V2", "V2"))

#test <- left_join(test, target_bins, by = c("V2", "V2"))
test <- left_join(test, target_marine_prop, by = c("V2", "V2"))

test$V2

periods <- read.delim("periods.txt")

periods<- periods[seq(dim(periods)[1],1),]

breaks <- periods$Breaks

periods$Period <- factor(periods$Period, levels=unique(periods$Period))
periods <- periods$Period


colnames(test)

test$period <- cut(test$V2, 
                   breaks=c(-Inf, 2500, 541, 485, 444, 419, 359, 299, 252, 201, 145, 66, 23, 3, Inf),
                   labels=periods)


#unique(test$econ)

#library(tidyverse)

test <- test[!is.infinite(test$V1),]
test <- test[!is.na(test$V1),]
test <- test[!is.infinite(test$ratio),]
test <- test[!is.na(test$ratio),]

hull_test <- test %>%
  group_by(unit_id) %>%
  slice(chull(ratio, V1))

ggplot(hull_test, aes(ratio, V1)) + geom_polygon(aes(group = unit_id, fill = period), alpha = 0.5) +
  theme_bw() + 
  #scale_y_log10(limits = c(0.003, 0.3)) +
  scale_y_continuous(limits = c(0, 0.22)) +
  geom_polygon(aes(group = unit_id), colour = "black", alpha = 0) +
  facet_wrap(~period) + geom_hline(yintercept = c(0.05, 0.15)) +
  geom_vline(xintercept = 0.5) +
  geom_point(aes(fill = period), colour = "black", pch = 21)


###### metrics #####

extracts <- read_csv("results.csv")
#extracts <- read.delim("results.txt") # alternative import text file

# remove unresolved strat_name_id hits

extracts <- extracts[!grepl(pattern = "\\~", extracts$strat_name_id),]   

extracts <- subset(extracts, target_word == "framboidal pyrite"
                  | target_word == "Framboidal pyrite"
                  | target_word == "Framboidal Pyrite"
                  | target_word == "pyrite framboids"
                  | target_word == "pyrite framboid"
                  | target_word == "Pyrite framboids"
                  | target_word == "Pyrite framboid"
                  | target_word == "Pyrite Framboids"
                  | target_word == "Pyrite Framboid"
                  | target_word == "PYRITE FRAMBOID"
                  | target_word == "PYRITE FRAMBOIDS"
                  | target_word == "pyrite nodules"
                  | target_word == "pyrite concretions"
                  | target_word == "Pyrite nodules"
                  | target_word == "Pyrite nodule"
                  | target_word == "nodular pyrite"
                  | target_word == "concretionary pyrite"
                  | target_word == "pyritic nodules"
                  | target_word == "pyritic concretions"
                  | target_word == "concretions of pyrite"
                  | target_word == "pyritic nodule"
                  | target_word == "nodules of pyrite"
                  | target_word == "Pyrite nodule"
                  | target_word == "Pyrite concretions"
                  | target_word == "Nodular pyrite"
                  | target_word == "Pyritic nodules"
                  | target_word == "pyrite concretion"
                  | target_word == "Pyrite Nodules"
                  | target_word == "Pyrite concretion"
                  | target_word == "PYRITE NODULE"
                  | target_word == "PYRITE NODULES")

length(unique(extracts$docid))

#run pyrites in part 1

length(unique(pyrites$unit_id))
